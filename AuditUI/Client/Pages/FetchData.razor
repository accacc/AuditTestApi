@page "/fetchdata"
@using AuditUI.Shared
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.ComponentModel.DataAnnotations

@inject HttpClient Http

<style>
    table {
        width: 100%;
        border-collapse: collapse;
        font-family: Arial,sans-serif
    }

    td, th {
        padding: 15px;
        text-align: left;
        border-bottom: 1px solid #ddd
    }

    th {
        background-color: #2196f3ff;
        color: #fff
    }
</style>

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudSelect @bind-Value="model.Entity" Label="Entity" HelperText="Entity"  AdornmentColor="Color.Secondary">
                       @if(entities!=null)
                        {
                            @foreach (string item in entities)
                            {
                                <MudSelectItem Value="@item">@item</MudSelectItem>
                            }
                        }
                    </MudSelect>

                    <MudTextField @bind-Value="model.Username" Label="User Name" Variant="Variant.Text"></MudTextField>

                    <MudDateRangePicker @ref="_picker" Label="Date Range" @bind-DateRange="model.DateRange" AutoClose="true">
                        @*  <PickerActions>
                        <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Clear())">Clear</MudButton>
                        <MudButton OnClick="@(() => _picker.Close(false))">Cancel</MudButton>
                        <MudButton Color="Color.Primary" OnClick="@(() => _picker.Close())">Ok</MudButton>
                        </PickerActions>*@
                    </MudDateRangePicker>

                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Search</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>

    </MudGrid>
</EditForm>

@if (audits == null)
{
    <p><em>Loading...</em></p>
}
else
{
   

    <table>
        <thead>
            <tr>
                <th>Entitiesa</th>
                <th>Date</th>

            </tr>
        </thead>

        @foreach (var audit in audits)
        {
            <tr>
                <td> <h5><b> @string.Join(",",@audit.EntityFrameworkEvent.Entries.Select(s=>s.Table))</b></h5></td>
                <td>  @audit.StartDate</td>
            </tr>
            <tr>
                <td>
                    <table>
                        @foreach (var entry in audit.EntityFrameworkEvent.Entries)
                        {

                            @if (entry.Action == "Update" && entry.Changes != null)
                            {
                                <tr>
                                    <td>
                                        @*  <b>PK:</b>

                        <label>
                        @string.Join(",", entry.PrimaryKey.Select(x => string.Join("=", x.Key, x.Value)))

                        </label>*@
                                        Value of <b>@entry.Table s</b> name  <b><i>updated</i></b> with
                                        @foreach (var change in entry.Changes)
                                        {
                                            <div>
                                                .
                                                <b> @change.ColumnName </b><label style="color:darkred;"> @change.OriginalValue </label> <label>to</label> <label style="color:green;"> @change.NewValue ,</label>


                                            </div>
                                        }
                                    </td>

                                </tr>
                            }
                            else if (entry.Action == "Insert" && entry.ColumnValues != null)
                            {
                                <tr>

                                    <td>
                                        @*   <b>PK:</b>

                        <label>
                        @string.Join(",", entry.PrimaryKey.Select(x => string.Join("=", x.Key, x.Value)))

                        </label>*@
                                        Values of <b>@entry.Table's</b> name   <b>inserted</b> with
                                        @foreach (var value in entry.ColumnValues)
                                        {
                                            <label style="color:darkred;">@value.Key : </label>

                                            <label style="color:green;">@value.Value ,</label>

                                        }

                                    </td>
                                </tr>
                            }
                            else if (entry.Action == "Delete" && entry.ColumnValues != null)
                            {
                                <tr>

                                    <td>
                                        @* <b>PK:</b>

                        <label>
                        @string.Join(",", entry.PrimaryKey.Select(x => string.Join("=", x.Key, x.Value)))

                        </label>*@
                                        Values of <b>@entry.Table's</b> name   <b>deleted</b> with
                                        @foreach (var value in entry.ColumnValues)
                                        {
                                            <label style="color:darkred;">@value.Key : </label>

                                            <label style="color:green;">@value.Value ,</label>

                                        }

                                    </td>
                                </tr>
                            }



                        }
                    </table>
                </td>
            </tr>



        }
    </table>
}



@code {

    private MudDateRangePicker _picker;
    private EventAudit[]? audits;
    private List<string> entities;

    AuditFilterForm model = new AuditFilterForm();
    bool success;

    public class AuditFilterForm
    {
        public string Username { get; set; }

        //public DateTime StartDate { get; set; }

        //public DateTime EndDate { get; set; }

        public DateRange DateRange { get; set; } = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);

        public string Entity { get; set; }

    }

    private async Task OnValidSubmit(EditContext context)
    {
        string url = $"WeatherForecast?StartDate={model.DateRange.Start}&EndDate={model.DateRange.End}&UserName={model.Username}&Entity={model.Entity}";
        audits = await Http.GetFromJsonAsync<EventAudit[]>(url);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
      
        entities = await Http.GetFromJsonAsync<List<string>>("WeatherForecast/all");

    }

    private void ShowBtnPress(Guid nr)
    {
        EventAudit tmpPerson = audits.First(f => f.Id == nr);
        tmpPerson.ShowDetails = !tmpPerson.ShowDetails;
    }

    private string Getentites(EventAudit context) => string.Join(",", context.EntityFrameworkEvent.Entries.Select(s => s.Table));
}
